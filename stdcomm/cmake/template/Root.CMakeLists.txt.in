#
# Copyright 2024 zhlinh and ccgo Project Authors. All rights reserved.
# Use of this source code is governed by a MIT-style
# license that can be found at
#
# https://opensource.org/license/MIT
#
# The above copyright notice and this permission
# notice shall be included in all copies or
# substantial portions of the Software.

cmake_minimum_required(VERSION 3.14)

set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}" CACHE PATH "Installation directory" FORCE)
message(STATUS "CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}")

# main project root
set(MAIN_PROJECT_ROOT_DIR ${CMAKE_SOURCE_DIR})
string(REPLACE "/" ";" TEMP_SPLIT_ITEMS "${CMAKE_SOURCE_DIR}")
list(GET TEMP_SPLIT_ITEMS -1 MAIN_PROJECT_NAME)

project(${MAIN_PROJECT_NAME} CXX C)

include(${CMAKE_SOURCE_DIR}/cmake/CMakeUtils.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/CMakeExtraFlags.cmake)

include_directories(./)

# add_subdirectory's order is the same as the order of the directories in the file system
if(THIRD_PARTY_OPTION)
    # generate third_party/CMakeLists.txt
    configure_file(
            ${CMAKE_SOURCE_DIR}/cmake/template/ThirdParty.CMakeLists.txt.in
            ${CMAKE_SOURCE_DIR}/third_party/CMakeLists.txt
            NEWLINE_STYLE LF
            @ONLY
    )
    add_subdirectory(third_party ${PROJECT_NAME}-third_party)
endif()

# generate src/CMakeLists.txt
configure_file(
        ${CMAKE_SOURCE_DIR}/cmake/template/Src.CMakeLists.txt.in
        ${CMAKE_SOURCE_DIR}/src/CMakeLists.txt
        NEWLINE_STYLE LF
        @ONLY
)
add_subdirectory(src ${PROJECT_NAME}-src)

# get the subdirectories of src
set(SRC_SUB_DIR_LIST "")
get_subdirectories(SRC_SUB_DIR_LIST "${CMAKE_CURRENT_SOURCE_DIR}/src")
message(STATUS "SRC_SUB_DIR_LIST=${SRC_SUB_DIR_LIST}")

if(GOOGLETEST_SUPPORT)
    set(COMM_GTEST_BUILD_DIR ${CMAKE_BINARY_DIR}/googletest-build)
    set(COMM_GTEST_DOWNLOAD_URL "https://github.com/google/googletest/archive/main.zip")
    set(COMM_GTEST_SRC_DIR ${CMAKE_BINARY_DIR}/googletest-src)
    include_directories(${COMM_GTEST_SRC_DIR}/googletest/include)
    include_directories(${COMM_GTEST_SRC_DIR}/googlemock/include)
    include(${CMAKE_SOURCE_DIR}/cmake/external/googletest/DownloadGTest.cmake)
    # generate tests/CMakeLists.txt
    configure_file(
            ${CMAKE_SOURCE_DIR}/cmake/template/Tests.CMakeLists.txt.in
            ${CMAKE_SOURCE_DIR}/tests/CMakeLists.txt
            NEWLINE_STYLE LF
            @ONLY
    )
    add_subdirectory("tests" "${PROJECT_NAME}-tests")
endif()
if(BENCHMARK_SUPPORT)
    # generate benches/CMakeLists.txt
#    configure_file(
#            ${CMAKE_SOURCE_DIR}/cmake/template/Benches.CMakeLists.txt.in
#            ${CMAKE_SOURCE_DIR}/benches/CMakeLists.txt
#            NEWLINE_STYLE LF
#            @ONLY
#    )
    #    add_subdirectory("benches" "${PROJECT_NAME}-benches")
endif()

set(SELF_LIBS_OUT ${CMAKE_SYSTEM_NAME}.out)

if(GOOGLETEST_SUPPORT)
    # 1. For GooleTest
    set(GOOGLETEST_NAME "${PROJECT_NAME}_googletest")

    set(CMAKE_PROJECT_NAME ${GOOGLETEST_NAME})

    file(GLOB SELF_TEMP_SRC_FILES RELATIVE ${PROJECT_SOURCE_DIR} tests/*.cc)
    list(APPEND GOOGLETEST_SUPPORT_FILES ${SELF_TEMP_SRC_FILES})
    # add tests first
    list(APPEND TARGET_SRC_LINKS ${PROJECT_NAME}-tests)
    foreach(DIR IN LISTS SRC_SUB_DIR_LIST)
        list(APPEND TARGET_SRC_LINKS ${PROJECT_NAME}-${DIR})
    endforeach()

    set(TEMP_TARGET_SRC_LINKS "")
    set(TEMP_TARGET_LINK_FLAGS "")
    get_third_party_binary_files(TEMP_TARGET_SRC_LINKS TEMP_TARGET_LINK_FLAGS)
    list(APPEND TARGET_SRC_LINKS ${TEMP_TARGET_SRC_LINKS})

    if(THIRD_PARTY_OPTION)
        list(APPEND TARGET_SRC_LINKS ${PROJECT_NAME}-third_party)
    endif()
    add_executable(${GOOGLETEST_NAME} ${GOOGLETEST_SUPPORT_FILES})

    if (NOT ${TEMP_TARGET_LINK_FLAGS} STREQUAL "")
      set_target_properties(${GOOGLETEST_NAME} PROPERTIES LINK_FLAGS ${TEMP_TARGET_LINK_FLAGS})
    endif()

    if (MSVC)
      # windows set COMM_PUBLIC to none
      target_compile_definitions(${GOOGLETEST_NAME} PRIVATE -DCOMM_ENABLE_EXPORTS=0)
    endif()

    if (APPLE)
      # for base
      set(OTHER_FRAMEWORKS "-framework Foundation -framework Cocoa -framework IOKit -framework SystemConfiguration")
      # for opencl
      set(OTHER_FRAMEWORKS "${OTHER_FRAMEWORKS} -framework OpenCL -framework Accelerate")
      # for ssl
      set(OTHER_FRAMEWORKS "${OTHER_FRAMEWORKS}  -framework Network -framework Security")
    endif()

    message(STATUS "GOOGLETEST-> TARGET_SRC_LINKS=${TARGET_SRC_LINKS}")

    target_link_libraries(
            ${GOOGLETEST_NAME}
            ${TARGET_SRC_LINKS}
            gtest_main
            ${ZLIB_LIBRARY}
            ${MINIZIP_LIBRARY}
            ${OTHER_FRAMEWORKS}
    )
    set_property(TARGET ${GOOGLETEST_NAME} PROPERTY LINKER_LANGUAGE "CXX")

    set_target_properties(${GOOGLETEST_NAME} PROPERTIES OUTPUT_NAME ${GOOGLETEST_NAME})

    if (APPLE AND ${CMAKE_GENERATOR} STREQUAL "Xcode")
        set_target_properties(${GOOGLETEST_NAME} PROPERTIES XCODE_SCHEME_ARGUMENTS "--debuglog")
    elseif(MSVC)
        set_target_properties(${GOOGLETEST_NAME} PROPERTIES VS_DEBUGGER_COMMAND_ARGUMENTS "--debuglog")
        set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${GOOGLETEST_NAME})
    elseif(CMAKE_GENERATOR STREQUAL "CodeLite")
        set(CMAKE_CODELITE_USE_TARGETS ON)
    endif()

    install(TARGETS ${GOOGLETEST_NAME} RUNTIME DESTINATION ${SELF_LIBS_OUT})

elseif(BENCHMARK_SUPPORT)
    # 2. For Benchmark
    file(GLOB SELF_TEMP_SRC_FILES RELATIVE ${PROJECT_SOURCE_DIR} benches/*.cc)
    list(APPEND GOOGLETEST_SUPPORT_FILES ${SELF_TEMP_SRC_FILES})
    # add benches first
    list(APPEND TARGET_SRC_LINKS ${PROJECT_NAME}-benches)
    foreach(DIR IN LISTS SRC_SUB_DIR_LIST)
        list(APPEND TARGET_SRC_LINKS ${PROJECT_NAME}-${DIR})
    endforeach()

    set(TEMP_TARGET_SRC_LINKS "")
    set(TEMP_TARGET_LINK_FLAGS "")
    get_third_party_binary_files(TEMP_TARGET_SRC_LINKS TEMP_TARGET_LINK_FLAGS)
    list(APPEND TARGET_SRC_LINKS ${TEMP_TARGET_SRC_LINKS})

    if(THIRD_PARTY_OPTION)
        list(APPEND TARGET_SRC_LINKS ${PROJECT_NAME}-third_party)
    endif()

    if (APPLE)
      set(OTHER_FRAMEWORKS "-framework Foundation -framework Cocoa -framework IOKit -framework SystemConfiguration")
      # for opencl
      set(OTHER_FRAMEWORKS "${OTHER_FRAMEWORKS} -framework OpenCL -framework Accelerate")
      # for ssl
      set(OTHER_FRAMEWORKS "${OTHER_FRAMEWORKS} -framework Network -framework Security")
    endif()

    foreach(file ${BENCHMARK_TARGET_FILES})
        string(REPLACE ".cc" "" file_name ${file})
        string(REPLACE "benches/" "" file_name ${file_name})
        message(STATUS "BENCHMARK_TARGET_FILES=${file_name}")
        add_executable(${file_name} benches/${file_name}.cc)
        target_link_libraries(
                ${file_name}
                ${TARGET_SRC_LINKS}
                benchmark_main
                ${ZLIB_LIBRARY}
                ${MINIZIP_LIBRARY}
                ${OTHER_FRAMEWORKS}
        )
        if (NOT ${TEMP_TARGET_LINK_FLAGS} STREQUAL "")
          set_target_properties(${file_name} PROPERTIES LINK_FLAGS ${TEMP_TARGET_LINK_FLAGS})
        endif()
        if (MSVC)
          # windows set COMM_PUBLIC to none
          target_compile_definitions(${file_name} PRIVATE -DCOMM_ENABLE_EXPORTS=0)
        endif()
        install(TARGETS ${file_name} RUNTIME DESTINATION ${SELF_LIBS_OUT})
    endforeach()

else()
    # 3. For Source Code Project
    if(ANDROID)
        list(APPEND LINK_SRC_DIRS third_party)
        link_directories(${LINK_SRC_DIRS})

        foreach(DIR IN LISTS SRC_SUB_DIR_LIST)
            list(APPEND TARGET_SRC_LINKS ${PROJECT_NAME}-${DIR})
        endforeach()

        file(GLOB SELF_TEMP_SRC_FILES RELATIVE ${PROJECT_SOURCE_DIR} include/${PROJECT_NAME}/api/android/*.h)
        list(APPEND SELF_SRC_FILES ${SELF_TEMP_SRC_FILES})
        source_group(api FILES ${SELF_TEMP_SRC_FILES})

        file(GLOB SELF_TEMP_SRC_FILES RELATIVE ${PROJECT_SOURCE_DIR} src/api/android/*.h)
        list(APPEND SELF_SRC_FILES ${SELF_TEMP_SRC_FILES})

        exclude_unittest_files(SELF_SRC_FILES)

        set(TEMP_TARGET_SRC_LINKS "")
        set(TEMP_TARGET_LINK_FLAGS "")
        get_third_party_binary_files(TEMP_TARGET_SRC_LINKS TEMP_TARGET_LINK_FLAGS)
        list(APPEND TARGET_SRC_LINKS ${TEMP_TARGET_SRC_LINKS})

        if(THIRD_PARTY_OPTION)
            message(STATUS "FOUND ${PROJECT_NAME}-third_party")
            list(APPEND TARGET_SRC_LINKS ${PROJECT_NAME}-third_party)
        endif()

        set(CMAKE_FIND_LIBRARY_PREFIXES "lib")
        set(CMAKE_FIND_LIBRARY_SUFFIXES ".so" ".a")
        # find_library(log-lib log)
        list(APPEND TARGET_SRC_LINKS log)
        # for zlib issue: fortify/unistd.h:174: undefined reference to `__write_chk'
        # do not use find_libray here
        # find_library(z-lib z)
        list(APPEND TARGET_SRC_LINKS z)

        add_library(${PROJECT_NAME} SHARED ${SELF_SRC_FILES})
        install(TARGETS ${PROJECT_NAME} LIBRARY DESTINATION ${SELF_LIBS_OUT} ARCHIVE DESTINATION ${SELF_LIBS_OUT})
        # link
        message(STATUS "TARGET_SRC_LINKS=${TARGET_SRC_LINKS}")
        target_link_libraries(${PROJECT_NAME} PUBLIC ${TARGET_SRC_LINKS})
        set_property(TARGET ${PROJECT_NAME} PROPERTY LINKER_LANGUAGE "CXX")

    elseif(APPLE)
        # the static library of iOS or macOS is already build and install
    elseif(MSVC)
        # the static library of windows is already build and install
    endif()
endif()
